/* tslint:disable */
/* eslint-disable */
/**
 * XRP IOU Server API
 * XRP 지갑 관리 및 KRW IOU 거래 시스템 API 문서
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiAdminDomainSettingsPutRequest
 */
export interface ApiAdminDomainSettingsPutRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiAdminDomainSettingsPutRequest
     */
    'autoWhitelist'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiAdminDomainSettingsPutRequest
     */
    'domainType'?: ApiAdminDomainSettingsPutRequestDomainTypeEnum;
}

export const ApiAdminDomainSettingsPutRequestDomainTypeEnum = {
    Whitelist: 'whitelist',
    Blacklist: 'blacklist',
    Open: 'open'
} as const;

export type ApiAdminDomainSettingsPutRequestDomainTypeEnum = typeof ApiAdminDomainSettingsPutRequestDomainTypeEnum[keyof typeof ApiAdminDomainSettingsPutRequestDomainTypeEnum];

/**
 * 
 * @export
 * @interface ApiAuthLoginPostRequest
 */
export interface ApiAuthLoginPostRequest {
    /**
     * 사용자 이메일
     * @type {string}
     * @memberof ApiAuthLoginPostRequest
     */
    'email': string;
    /**
     * 사용자 비밀번호
     * @type {string}
     * @memberof ApiAuthLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiAuthRegisterPost201Response
 */
export interface ApiAuthRegisterPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthRegisterPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAuthRegisterPost201Response
     */
    'token'?: string;
    /**
     * 
     * @type {object}
     * @memberof ApiAuthRegisterPost201Response
     */
    'user'?: object;
}
/**
 * 
 * @export
 * @interface ApiAuthRegisterPostRequest
 */
export interface ApiAuthRegisterPostRequest {
    /**
     * 사용자 이메일
     * @type {string}
     * @memberof ApiAuthRegisterPostRequest
     */
    'email': string;
    /**
     * 사용자 비밀번호 (6자 이상)
     * @type {string}
     * @memberof ApiAuthRegisterPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ExchangeRate
 */
export interface ExchangeRate {
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'quoteCurrency'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExchangeRate
     */
    'rate'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExchangeRate
     */
    'spread'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'validFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'validTo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExchangeRate
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface SwapFeeConfig
 */
export interface SwapFeeConfig {
    /**
     * 
     * @type {string}
     * @memberof SwapFeeConfig
     */
    'swapType'?: SwapFeeConfigSwapTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SwapFeeConfig
     */
    'feeType'?: SwapFeeConfigFeeTypeEnum;
    /**
     * PERCENTAGE: 0.003 (0.3%), FIXED: 10 (10 KRW)
     * @type {number}
     * @memberof SwapFeeConfig
     */
    'baseFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapFeeConfig
     */
    'minFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapFeeConfig
     */
    'maxFee'?: number;
    /**
     * 
     * @type {Array<SwapFeeConfigTieredRatesInner>}
     * @memberof SwapFeeConfig
     */
    'tieredRates'?: Array<SwapFeeConfigTieredRatesInner>;
    /**
     * 
     * @type {string}
     * @memberof SwapFeeConfig
     */
    'effectiveFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapFeeConfig
     */
    'effectiveTo'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SwapFeeConfig
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SwapFeeConfig
     */
    'description'?: string;
}

export const SwapFeeConfigSwapTypeEnum = {
    XrpToKrw: 'XRP_TO_KRW',
    KrwToXrp: 'KRW_TO_XRP',
    IouTransfer: 'IOU_TRANSFER'
} as const;

export type SwapFeeConfigSwapTypeEnum = typeof SwapFeeConfigSwapTypeEnum[keyof typeof SwapFeeConfigSwapTypeEnum];
export const SwapFeeConfigFeeTypeEnum = {
    Percentage: 'PERCENTAGE',
    Fixed: 'FIXED',
    Tiered: 'TIERED'
} as const;

export type SwapFeeConfigFeeTypeEnum = typeof SwapFeeConfigFeeTypeEnum[keyof typeof SwapFeeConfigFeeTypeEnum];

/**
 * 
 * @export
 * @interface SwapFeeConfigTieredRatesInner
 */
export interface SwapFeeConfigTieredRatesInner {
    /**
     * 
     * @type {number}
     * @memberof SwapFeeConfigTieredRatesInner
     */
    'threshold'?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapFeeConfigTieredRatesInner
     */
    'fee'?: number;
}

/**
 * AdminDomainApi - axios parameter creator
 * @export
 */
export const AdminDomainApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Domain 설정 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminDomainSettingsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/domain/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Domain 설정 업데이트
         * @param {ApiAdminDomainSettingsPutRequest} apiAdminDomainSettingsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminDomainSettingsPut: async (apiAdminDomainSettingsPutRequest: ApiAdminDomainSettingsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAdminDomainSettingsPutRequest' is not null or undefined
            assertParamExists('apiAdminDomainSettingsPut', 'apiAdminDomainSettingsPutRequest', apiAdminDomainSettingsPutRequest)
            const localVarPath = `/api/admin/domain/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAdminDomainSettingsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminDomainApi - functional programming interface
 * @export
 */
export const AdminDomainApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminDomainApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Domain 설정 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminDomainSettingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminDomainSettingsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminDomainApi.apiAdminDomainSettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Domain 설정 업데이트
         * @param {ApiAdminDomainSettingsPutRequest} apiAdminDomainSettingsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminDomainSettingsPut(apiAdminDomainSettingsPutRequest: ApiAdminDomainSettingsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminDomainSettingsPut(apiAdminDomainSettingsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminDomainApi.apiAdminDomainSettingsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminDomainApi - factory interface
 * @export
 */
export const AdminDomainApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminDomainApiFp(configuration)
    return {
        /**
         * 
         * @summary Domain 설정 조회
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminDomainSettingsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminDomainSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Domain 설정 업데이트
         * @param {ApiAdminDomainSettingsPutRequest} apiAdminDomainSettingsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminDomainSettingsPut(apiAdminDomainSettingsPutRequest: ApiAdminDomainSettingsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAdminDomainSettingsPut(apiAdminDomainSettingsPutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminDomainApi - object-oriented interface
 * @export
 * @class AdminDomainApi
 * @extends {BaseAPI}
 */
export class AdminDomainApi extends BaseAPI {
    /**
     * 
     * @summary Domain 설정 조회
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminDomainApi
     */
    public apiAdminDomainSettingsGet(options?: RawAxiosRequestConfig) {
        return AdminDomainApiFp(this.configuration).apiAdminDomainSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Domain 설정 업데이트
     * @param {ApiAdminDomainSettingsPutRequest} apiAdminDomainSettingsPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminDomainApi
     */
    public apiAdminDomainSettingsPut(apiAdminDomainSettingsPutRequest: ApiAdminDomainSettingsPutRequest, options?: RawAxiosRequestConfig) {
        return AdminDomainApiFp(this.configuration).apiAdminDomainSettingsPut(apiAdminDomainSettingsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 사용자 로그인
         * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'apiAuthLoginPostRequest', apiAuthLoginPostRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 신규 사용자 등록 및 XRP 지갑 생성
         * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAuthRegisterPostRequest' is not null or undefined
            assertParamExists('apiAuthRegisterPost', 'apiAuthRegisterPostRequest', apiAuthRegisterPostRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 사용자 로그인
         * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthRegisterPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(apiAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 신규 사용자 등록 및 XRP 지갑 생성
         * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAuthRegisterPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(apiAuthRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary 사용자 로그인
         * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthRegisterPost201Response> {
            return localVarFp.apiAuthLoginPost(apiAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 신규 사용자 등록 및 XRP 지갑 생성
         * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAuthRegisterPost201Response> {
            return localVarFp.apiAuthRegisterPost(apiAuthRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary 사용자 로그인
     * @param {ApiAuthLoginPostRequest} apiAuthLoginPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(apiAuthLoginPostRequest: ApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(apiAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 신규 사용자 등록 및 XRP 지갑 생성
     * @param {ApiAuthRegisterPostRequest} apiAuthRegisterPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(apiAuthRegisterPostRequest: ApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(apiAuthRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



